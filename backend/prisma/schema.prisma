generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum JobType {
  FULL_TIME
  PART_TIME
  REMOTE
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String // "user" or "company"
  createdAt DateTime @default(now())

  jobs            Job[]          @relation("EmployerJobs")
  applications    Application[]
  profile         Profile?       @relation("UserProfile")
  companyProfile  CompanyProfile? // ✅ add this line

  requestedConnections Connection[]   @relation("RequestedConnections")
  receivedConnections  Connection[]   @relation("ReceivedConnections")

  // ✅ add this line for the opposite side of Notification relation
  notifications Notification[]
}



model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation("UserProfile", fields: [userId], references: [id])
  headline   String?
  about      String?
  location   String?
  website    String?
  skills     String[]
  avatar     String? // Cloudinary URL
  education  Json[] // Embedded Education[]
  experience Json[] // Embedded Experience[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Job {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  salary       Int?
  category     String?
  location     String?
  jobType      JobType
  employerId   String        @db.ObjectId
  employer     User          @relation("EmployerJobs", fields: [employerId], references: [id])
  createdAt    DateTime      @default(now())
  applications Application[]
  companyName  String
}

model Application {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId     String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  resume    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Connection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String   @db.ObjectId
  receiverId  String   @db.ObjectId
  requester   User     @relation("RequestedConnections", fields: [requesterId], references: [id])
  receiver    User     @relation("ReceivedConnections", fields: [receiverId], references: [id])
  status      String   @default("pending") // "pending" | "accepted" | "rejected"
  createdAt   DateTime @default(now())
}
model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   
  message      String
  read         Boolean  @default(false)
  connectionId String?  @db.ObjectId
  createdAt    DateTime @default(now())

  // ✅ relation to User
  user         User     @relation(fields: [userId], references: [id])
}

model CompanyProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  companyName String
  description String?
  location    String?
  website     String?
  logo        String?
  industry    String?
  employees   Int?
  foundedYear Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

